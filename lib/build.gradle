import org.springframework.boot.gradle.plugin.SpringBootPlugin

import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'war'
    id 'jacoco'
    id 'io.freefair.lombok' version '8.14'
    id 'org.asciidoctor.jvm.convert' version '4.0.4'
    id 'maven-publish'
    id 'signing'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.5.4' apply false
    id 'org.sonarqube' version '6.2.0.5505'
}

group = 'com.toedter'
version = '2.1.5-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url = 'https://repo.spring.io/release' }
    maven { url = 'https://repo.spring.io/milestone' }
    maven { url = 'https://repo.spring.io/snapshot' }
}

configurations {
    docs
}

dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.atteo:evo-inflector:1.3'

    providedCompile 'com.google.code.findbugs:jsr305:3.0.2'
    providedCompile 'jakarta.servlet:jakarta.servlet-api'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.springframework:spring-webmvc'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.slf4j:slf4j-api'
    testImplementation 'org.slf4j:jcl-over-slf4j'
    testImplementation 'ch.qos.logback:logback-classic'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.hamcrest:hamcrest-library'
    testImplementation 'jakarta.persistence:jakarta.persistence-api'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    testImplementation 'com.networknt:json-schema-validator:1.5.8'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    docs 'io.spring.asciidoctor.backends:spring-asciidoctor-backends:0.0.7'
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
    archivesBaseName = 'spring-hateoas-jsonapi'
    manifest {
        attributes(
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                'Implementation-Title': 'JSON:API for Spring HATEOAS',
                'Implementation-Version': version,
                'Automatic-Module-Name': 'spring.hateoas.jsonapi'
        )
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/Jackson2JsonApiModule\$**Mixin*', '**/AbstractJsonApiSerializer**'])
        }))
    }
}

tasks.register('doc') {
    dependsOn asciidoctor
    dependsOn javadoc

    doLast {
        copy {
            from "$buildDir/docs/javadoc"
            into "$buildDir/docs/gh-pages/snapshot/api"
            filter { line -> line.replaceAll('lib', 'JSON:API for Spring HATEOAS') }
        }

        copy {
            from "$buildDir/docs/asciidoc"
            into "$buildDir/docs/gh-pages/snapshot/reference"
        }
    }
}

asciidoctor {
    configurations 'docs'
    sourceDir 'src/main/asciidoc/'
    baseDirFollowsSourceFile()
    attributes 'version': "${project.version}", 'fold': 'tags'
    outputOptions {
        backends 'spring-html'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.overview = 'src/main/javadoc/overview.html'
    exclude 'org/springframework/hateoas/mediatype/hal/forms/**'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'spring-hateoas-jsonapi'
            from components.java

            pom {
                name = 'JSON:API for Spring HATEOAS'
                description = 'Implementation of the media type application/vnd.api+json (JSON:API) to be integrated in Spring HATEOAS.'
                url = 'https://github.com/toedter/spring-hateoas-jsonapi'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'toedter'
                        name = 'Kai Toedter'
                        email = 'kai@toedter.com'
                    }
                }
                scm {
                    url = 'https://github.com/toedter/spring-hateoas-jsonapi.git'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                name = 'central-portal-snapshots'
                url = 'https://central.sonatype.com/repository/maven-snapshots/'
            } else {
                url = 'https://central.sonatype.com/staging/deploy/maven2/'
            }
        }
    }
}

// we don't publish the gradle module metadata
tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

signing {
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey as String, signingPassword as String)
    sign publishing.publications.mavenJava
}

sonarqube {
    properties {
        property 'sonar.projectName', 'JSON:API for Spring HATEOAS'
        property 'sonar.projectKey', 'toedter_spring-hateoas-jsonapi'
        property 'sonar.organization', 'toedter'
        property 'sonar.host.url', 'https://sonarcloud.io'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-parameters")
}
